#ifndef __PARSER__H__
#define __PARSER__H__ 1


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int syntax = 0;
enum ERROR
{

    ERROR_CHAR,ERROR_SHORT,ERROR_INT,ERROR_LONG,ERROR_FLOAT,ERROR_DOUBLE,ERROR_UNSIGNED,ERROR_VOID,ERROR_TRUE,ERROR_FALSE,ERROR_ENUM,ERROR_UNION,ERROR_STRING,ERROR_STATIC,ERROR_MALLOC,ERROR_REALLOC,ERROR_CALLOC,ERROR_IF,ERROR_ELSE,ERROR_FOR,ERROR_FOREACH,ERROR_LOOP,ERROR_BREAK,ERROR_CONTINUE,ERROR_GOTO,ERROR_WHILE,ERROR_DO,ERROR_SWITCH,ERROR_CASE,ERROR_BOOL,ERROR_FILE,ERROR_CONST,ERROR_VOLATILE,ERROR_REGISTER,ERROR_ARRAY,ERROR_BYTE,ERROR_RECORD,ERROR_RETURN,ERROR_START,ERROR_END,ERROR_EOF,ERROR_READ,ERROR_WRITE,ERROR_WRITELN,ERROR_OPEN,ERROR_CLOSE,ERROR_ECHO,ERROR_PV,ERROR_PT,ERROR_PLUS,ERROR_MOINS,ERROR_MULT,ERROR_DIV,ERROR_VIR,ERROR_MOD,ERROR_INC,ERROR_DEC,ERROR_ETBIT,ERROR_OUBIT,ERROR_TOGGLE,ERROR_NOTBIT,ERROR_DECG,ERROR_DECD,ERROR_INF,ERROR_INFEG,ERROR_EG,ERROR_SUPEG,ERROR_SUP,ERROR_ETLOG,ERROR_OULOG,ERROR_DIFF,ERROR_ACCESTRU,ERROR_AFF,ERROR_AFFMOINS,ERROR_AFFPLUS,ERROR_AFFMULT,ERROR_AFFDIV,ERROR_AFFMOD,ERROR_AFFET,ERROR_AFFTOG,ERROR_FINCOM,ERROR_DEBCOM,ERROR_ACO,ERROR_ACF,ERROR_PO,ERROR_PF,ERROR_GUI
};


//char* tokens[] = {"CHAR_TOKEN","SHORT_TOKEN","INT_TOKEN","LONG_TOKEN","FLOAT_TOKEN","DOUBLE_TOKEN","UNSIGNED_TOKEN","VOID_TOKEN","TRUE_TOKEN","FALSE_TOKEN","ENUM_TOKEN","UNION_TOKEN","STRING_TOKEN","STATIC_TOKEN","MALLOC_TOKEN","REALLOC_TOKEN","CALLOC_TOKEN","IF_TOKEN","ELSE_TOKEN","FOR_TOKEN","FOREACH_TOKEN","LOOP_TOKEN","BREAK_TOKEN","CONTINUE_TOKEN","GOTO_TOKEN","WHILE_TOKEN","DO_TOKEN","SWITCH_TOKEN","CASE_TOKEN","BOOL_TOKEN","FILE_TOKEN","CONST_TOKEN","VOLATILE_TOKEN","REGISTER_TOKEN","ARRAY_TOKEN","BYTE_TOKEN","RECORD_TOKEN","RETURN_TOKEN","START_TOKEN","END_TOKEN","EOF_TOKEN","READ_TOKEN","WRITE_TOKEN","WRITELN_TOKEN","OPEN_TOKEN","CLOSE_TOKEN","ECHO_TOKEN","PV_TOKEN","PT_TOKEN","PLUS_TOKEN","MOINS_TOKEN","MULT_TOKEN","DIV_TOKEN","VIR_TOKEN","MOD_TOKEN","INC_TOKEN","DEC_TOKEN","ETBIT_TOKEN","OUBIT_TOKEN","TOGGLE_TOKEN","NOTBIT_TOKEN","DECG_TOKEN","DECD_TOKEN","INF_TOKEN","INFEG_TOKEN","EG_TOKEN","DIFF_TOKEN","SUPEG_TOKEN","SUP_TOKEN","ETLOG_TOKEN","OULOG_TOKEN","DIFF_TOKEN","ACCESTRU_TOKEN","AFF_TOKEN","AFFMOINS_TOKEN","AFFPLUS_TOKEN","AFFMULT_TOKEN","AFFDIV_TOKEN","AFFMOD_TOKEN","AFFET_TOKEN","AFFTOG_TOKEN","FINCOM_TOKEN","DEBCOM_TOKEN","ACO_TOKEN","ACF_TOKEN","PO_TOKEN","PF_TOKEN","GUI_TOKEN"};

char* nextSymbol(FILE* file);
void testSymbol( char* token, enum ERROR error , FILE* file );
void CHAR();
void SHORT();
void INT();
void LONG();
void FLOAT();
void DOUBLE();
void UNSIGNED();
void VOID();
void TRUE();
void FALSE();
void ENUM();
void UNION();
void STRING();
void STATIC();
void MALLOC();
void REALLOC();
void CALLOC();
void IF();
void ELSE();
void FOR();
void FOREACH();
void LOOP();
void BREAK();
void CONTINUE();
void GOTO();
void WHILE();
void DO();
void SWITCH();
void CASE();
void BOOL();
//void FILE();
void CONST();
void VOLATILE();
void REGISTER();
void ARRAY();
void BYTE();
void RECORD();
void RETURN();
void START();
void END();
//void EOF();
void READ();
void WRITE();
void WRITELN();
void OPEN();
void CLOSE();
void ECHO();
void PV();
void PT();
void PLUS();
void MOINS();
void MULT();
void DIV();
void VIR();
void MOD();
void INC();
void DEC();
void ETBIT();
void OUBIT();
void TOGGLE();
void NOTBIT();
void DECG();
void DECD();
void INF();
void INFEG();
void EG();
void DIFF();
void SUPEG();
void SUP();
void ETLOG();
void OULOG();
void DIFF();
void ACCESTRU();
void AFF();
void AFFMOINS();
void AFFPLUS();
void AFFMULT();
void AFFDIV();
void AFFMOD();
void AFFET();
void AFFTOG();
void FINCOM();
void DEBCOM();
void ACO();
void ACF();
void PO();
void PF();
void GUI();
void error(enum ERROR error);
void analyzer(FILE* file);
#endif
